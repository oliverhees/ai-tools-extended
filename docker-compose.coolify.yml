version: '3.8'

services:
  ai-tools:
    build:
      context: .
      dockerfile: Dockerfile
    image: ai-tools-extended:latest
    environment:
      # Original tool settings
      - WHISPER_MODEL=${WHISPER_MODEL:-base}
      - TTS_ENGINE=${TTS_ENGINE:-kokoro}
      - MAX_FILE_SIZE=${MAX_FILE_SIZE:-500MB}
      # Extension settings
      - MAX_VIDEO_DURATION=${MAX_VIDEO_DURATION:-600}
      - ENABLE_CACHE=${ENABLE_CACHE:-true}
      # Coolify specific
      - NODE_ENV=production
    volumes:
      - ai_tools_media:/app/media
      - ai_tools_cache:/app/cache
      - ai_tools_temp:/tmp
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    labels:
      - "coolify.managed=true"
      - "coolify.version=1.0"
      - "coolify.type=service"

  n8n:
    image: n8nio/n8n:latest
    environment:
      # No authentication - open for community
      - N8N_BASIC_AUTH_ACTIVE=false
      - N8N_HOST=0.0.0.0
      - N8N_PORT=5678
      - N8N_PROTOCOL=http
      - NODE_ENV=production
      - DB_TYPE=sqlite
      - N8N_USER_FOLDER=/home/node/.n8n
      # Allow all origins for community access
      - N8N_CORS_ORIGIN=*
    volumes:
      - n8n_data:/home/node/.n8n
      - n8n_workflows:/home/node/workflows
    restart: unless-stopped
    depends_on:
      - ai-tools
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:5678/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3
    labels:
      - "coolify.managed=true"
      - "coolify.type=service"

  redis:
    image: redis:7-alpine
    volumes:
      - redis_data:/data
    restart: unless-stopped
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    labels:
      - "coolify.managed=true"
      - "coolify.type=service"

volumes:
  ai_tools_media:
    driver: local
  ai_tools_cache:
    driver: local
  ai_tools_temp:
    driver: local
  n8n_data:
    driver: local
  n8n_workflows:
    driver: local
  redis_data:
    driver: local

  nginx:
    image: nginx:alpine
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - ai-tools
      - n8n
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    labels:
      - "coolify.managed=true"
      - "coolify.type=service"
      - "coolify.main=true"

volumes:
  ai_tools_media:
    driver: local
  ai_tools_cache:
    driver: local
  ai_tools_temp:
    driver: local
  n8n_data:
    driver: local
  n8n_workflows:
    driver: local
  redis_data:
    driver: local

networks:
  default:
    name: ai-tools-network
    driver: bridge